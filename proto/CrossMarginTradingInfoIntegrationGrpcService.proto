syntax = "proto3";
package cross_margin_trading_info_integration;
import "google/protobuf/empty.proto";

enum PositionSide{
    Buy = 0;
    Sell = 1;
}

enum PositionCloseReason{
    ClientCommand = 0;
    StopOut = 1;
    TakeProfit = 2;
    StopLoss = 3;
    ForceClose = 4;
}

message GetActiveOrdersGrpcRequest{
    string ApiKey = 1;
    string TraderId = 2;
    string AccountId = 3;
}

message GetPendingOrdersGrpcRequest{
    string ApiKey = 1;
    string TraderId = 2;
    string AccountId = 3;
}


message GetHistoryGrpcRequest{
    string ApiKey = 1;
    string TraderId = 2;
    string AccountId = 3;
    uint64 DateFromMicroSeconds = 4;
    uint64 DateToMicroSeconds = 5;
}

message TradingInfoBidAskModel{
    string Id = 1;
    double Bid = 2;
    double Ask = 3;
    uint64 DateTime = 4;
}

message ActiveOrderGrpcModel{
    string Id = 1;
    string TraderId = 2;
    string AccountId = 3;
    string InstrumentId = 4;
    double Lots = 5;
    uint64 CreateDate = 6;
    PositionSide PositionSide = 7;
    optional double TpInPositionPl = 8;
    optional double TpInAssetPrice = 9;
    optional double SlInPositionPl = 10;
    optional double SlInAssetPrice = 11;
    uint64 LastUpdateDate = 12;
    string CreateProcessId = 13;
    double Profit = 14;
    optional double DesirePrice = 15;
    double OpenPrice = 16;
    TradingInfoBidAskModel OpenBidAsk = 17;
    uint64 OpenDate = 18;
}

message PendingOrderGrpcModel{
    string Id = 1;
    string TraderId = 2;
    string AccountId = 3;
    string InstrumentId = 4;
    double Lots = 5;
    uint64 CreateDate = 6;
    PositionSide PositionSide = 7;
    optional double TpInPositionPl = 8;
    optional double TpInAssetPrice = 9;
    optional double SlInPositionPl = 10;
    optional double SlInAssetPrice = 11;
    uint64 LastUpdateDate = 12;
    string CreateProcessId = 13;
    double Profit = 14;
    optional double DesirePrice = 15;
}

message ClosedOrderGrpcModel{
    string Id = 1;
    string TraderId = 2;
    string AccountId = 3;
    string InstrumentId = 4;
    double Lots = 5;
    uint64 CreateDate = 6;
    PositionSide PositionSide = 7;
    optional double TpInPositionPl = 8;
    optional double TpInAssetPrice = 9;
    optional double SlInPositionPl = 10;
    optional double SlInAssetPrice = 11;
    uint64 LastUpdateDate = 12;
    string CreateProcessId = 13;
    double Profit = 14;
    optional double DesirePrice = 15;
    double OpenPrice = 16;
    TradingInfoBidAskModel OpenBidAsk = 17;
    uint64 OpenDate = 18;
    TradingInfoBidAskModel CloseBidAsk = 19;
    double ClosePrice = 20;
    uint64 CloseDate = 21;
    PositionCloseReason CloseReason = 22;
}


enum TradingInfoGrpcStatus{
    Ok=0;
    PositionOrOrderNotFound = 1;
    ProcessIdDuplication = 2;
    Other = 3;
}


message CloseActiveOrderRequest{
    string ApiKey = 1;
    string TraderId = 2;
    string AccountId = 3;
    string Id = 4;
    string ProcessId = 5;
    PositionCloseReason CloseReason = 6;
}

message ForceCloseActiveOrderRequest{
    string ApiKey = 1;
    string TraderId = 2;
    string AccountId = 3;
    string Id = 4;
    string ProcessId = 5;
    PositionCloseReason CloseReason = 6;
}

message CloseActiveOrderResponse{
    TradingInfoGrpcStatus Status = 1;  
    optional string ErrorMessage = 2;  
}


message CancelPendingOrderRequest{
    string ApiKey = 1;
    string TraderId = 2;
    string AccountId = 3;
    string Id = 4;
}

message CancelPendingOrderResponse{
    TradingInfoGrpcStatus Status = 1;   
    optional string ErrorMessage = 2;   
}


message GetBidAskSnapshotRequest{
    string ApiKey = 1;
    optional string InstrumentId = 2;
}

message BidAskGrpcModel{
    string Id = 1;
    uint64 TimeStamp = 2; 
    double Bid = 3;
    double Ask = 4;
}

message GetActiveOrderGrpcRequest{
    string ApiKey = 1;
    string TraderId = 2;
    string AccountId = 3;
    string Id = 4;
}

message GetActiveOrderGrpcResponse{
    optional ActiveOrderGrpcModel Order = 1;
}

service CrossMarginTradingInfoIntegrationGrpc {
    rpc GetActiveOrders(GetActiveOrdersGrpcRequest) returns (stream ActiveOrderGrpcModel);
    rpc GetPendingOrders(GetPendingOrdersGrpcRequest) returns (stream PendingOrderGrpcModel);
    rpc GetHistoryPositions(GetHistoryGrpcRequest) returns (stream ClosedOrderGrpcModel);

    rpc GetActiveOrder(GetActiveOrderGrpcRequest) returns (GetActiveOrderGrpcResponse);

    rpc CloseActiveOrder(CloseActiveOrderRequest) returns (CloseActiveOrderResponse);

    rpc ForceCloseActiveOrder(ForceCloseActiveOrderRequest) returns (CloseActiveOrderResponse);

    rpc CancelPendingOrder(CancelPendingOrderRequest) returns (CancelPendingOrderResponse);

    rpc GetBidAskSnapshot(GetBidAskSnapshotRequest) returns (stream BidAskGrpcModel);

    rpc Ping(google.protobuf.Empty) returns(google.protobuf.Empty);
}